import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from keyboards import keyboard_main, pdf_choice_keyboard, payment_button, base_pdf_keyboard, pro_pdf_keyboard
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# === –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ===
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# === –ü—É—Ç–∏ ===
BASE_DIR = os.path.dirname(__file__)
IMAGE_DIR = os.path.join(BASE_DIR, "images")
PDF_DIR = os.path.join(BASE_DIR, "pdf_files")
FREE_PDF_DIR = os.path.join(PDF_DIR, "1Free")
BASE_PDF_DIR = os.path.join(PDF_DIR, "2Base")
PRO_PDF_DIR = os.path.join(PDF_DIR, "3Pro")
VIP_PDF_DIR = os.path.join(PDF_DIR, "4VIP")

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    photo = InputFile(os.path.join(IMAGE_DIR, "bot_help_response.png"))
    await bot.send_photo(
        message.chat.id,
        photo=photo,
        caption=(
            "–ü—Ä–∏–≤–µ—Ç! ü§ñ\n\n"
            "–Ø ‚Äî –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ë–∏–∑–Ω–µ—Å –ø–æ —à–∞–±–ª–æ–Ω—É¬ª.
"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ:"
        ),
        reply_markup=keyboard_main
    )

# === –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–±–æ—Ä PDF ===
@dp.message_handler(commands=["files"])
async def show_pdf_options(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç:", reply_markup=pdf_choice_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith("base_"))
async def send_base_pdf(callback_query: types.CallbackQuery):
    path = os.path.join(BASE_PDF_DIR, f"{callback_query.data}.pdf")
    await bot.send_document(callback_query.from_user.id, InputFile(path))

@dp.callback_query_handler(lambda c: c.data.startswith("pro_"))
async def send_pro_pdf(callback_query: types.CallbackQuery):
    path = os.path.join(PRO_PDF_DIR, f"{callback_query.data}.pdf")
    await bot.send_document(callback_query.from_user.id, InputFile(path))

@dp.callback_query_handler(lambda c: c.data.startswith("free_"))
async def send_free_pdf(callback_query: types.CallbackQuery):
    filename = f"{callback_query.data[5:]}.pdf"
    path = os.path.join(FREE_PDF_DIR, filename)
    if os.path.exists(path):
        await bot.send_document(callback_query.from_user.id, InputFile(path))
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# === VIP-–∞–Ω–∫–µ—Ç–∞ ===
class VIPForm(StatesGroup):
    choosing_topics = State()
    waiting_for_note = State()

vip_topics = [
    "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –≤ –≤–∞—à–µ–π –Ω–∏—à–µ",
    "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ",
    "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏",
    "–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ (–ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏–ª–∏ –¶–ê)",
    "–û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂ –≤ –≤–∞—à–µ–º —Å–µ–≥–º–µ–Ω—Ç–µ",
    "–ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
    "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∑–∞–ø–∞–¥–Ω—ã–º —Ä—ã–Ω–∫–æ–º",
    "–ü–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
    "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç",
    "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏",
    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
    "–ü–æ–¥–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–∫–ª–∞–º—ã",
    "–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏",
    "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ 90 –¥–Ω–µ–π"
]

def get_vip_keyboard(selected):
    buttons = []
    for i, topic in enumerate(vip_topics):
        prefix = "‚úÖ " if i in selected else "‚ûï "
        buttons.append([InlineKeyboardButton(f"{prefix}{topic}", callback_data=f"vip_{i}")])
    buttons.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="vip_done")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message_handler(commands=["vip"])
async def start_vip_form(message: types.Message, state: FSMContext):
    await state.update_data(selected=set())
    await VIPForm.choosing_topics.set()
    await message.answer("üìã –û—Ç–º–µ—Ç—å —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –≤–∞–∂–Ω—ã:", reply_markup=get_vip_keyboard(set()))

@dp.callback_query_handler(lambda c: c.data.startswith("vip_"), state=VIPForm.choosing_topics)
async def handle_vip_selection(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected", set())

    if callback_query.data == "vip_done":
        count = len(selected)
        if count == 0:
            await callback_query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã.", show_alert=True)
            return

        # –ì—Ä–∞–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        if count == 1:
            price = "–æ—Ç 4.990 ‚ÇΩ"
        elif 2 <= count <= 4:
            price = "–æ—Ç 5.990 ‚ÇΩ"
        elif 5 <= count <= 7:
            price = "–æ—Ç 6.990 ‚ÇΩ"
        elif 8 <= count <= 10:
            price = "–æ—Ç 7.990 ‚ÇΩ"
        elif 11 <= count <= 13:
            price = "–æ—Ç 8.990 ‚ÇΩ"
        else:
            price = "–¥–æ 9.990 ‚ÇΩ"

        await state.update_data(price=price)
        await bot.send_message(
            callback_query.from_user.id,
            f"üìä –í—ã –≤—ã–±—Ä–∞–ª–∏ {count} —Ç–µ–º(—ã). –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{price}*

"
            "‚úèÔ∏è –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä—É—á–Ω—É—é? –ù–∞–ø–∏—à–∏ —Å–µ–π—á–∞—Å ‚Äî —è –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ —Å –∞–Ω–∫–µ—Ç–æ–π.",
            parse_mode="Markdown"
        )
        await VIPForm.waiting_for_note.set()
        return

    topic_id = int(callback_query.data.split("_")[1])
    if topic_id in selected:
        selected.remove(topic_id)
    else:
        selected.add(topic_id)
    await state.update_data(selected=selected)
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=get_vip_keyboard(selected)
    )

@dp.message_handler(state=VIPForm.waiting_for_note)
async def handle_vip_note(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected", set())
    price = data.get("price", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    note = message.text

    summary = "üì© –ê–Ω–∫–µ—Ç–∞ VIP –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

"
    summary += f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:
"
    for i in selected:
        summary += f"‚Äî {vip_topics[i]}
"
    summary += f"
üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {note}
"
    summary += f"
üí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {price}"

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è.")
    await bot.send_message(message.chat.id, summary)
    await state.finish()

# === Fallback ===
@dp.message_handler()
async def fallback(message: types.Message):
    await message.reply("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=keyboard_main)

if __name__ == "__main__":
    print("‚úÖ main.py –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
